// Generated by CoffeeScript 1.6.3
(function() {
  var Range, addCursorColorIndex, applyToShareJS, cursorToRange, rangeToCursor, _connections,
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Range = require("ace/range").Range;

  rangeToCursor = function(editorDoc, range) {
    return [editorDoc.positionToIndex(range.start), editorDoc.positionToIndex(range.end)];
  };

  cursorToRange = function(editorDoc, cursor) {
    var end, range, start;
    if (!(cursor instanceof Array)) {
      cursor = [cursor, cursor];
    }
    start = editorDoc.indexToPosition(cursor[0]);
    end = editorDoc.indexToPosition(cursor[1]);
    range = Range.fromPoints(start, end);
    range.cursor = end;
    return range;
  };

  applyToShareJS = function(editorDoc, delta, doc) {
    var pos, text;
    pos = rangeToCursor(editorDoc, delta.range)[0];
    switch (delta.action) {
      case 'insertText':
        doc.insert(pos, delta.text);
        break;
      case 'removeText':
        doc.del(pos, delta.text.length);
        break;
      case 'insertLines':
        text = delta.lines.join('\n') + '\n';
        doc.insert(pos, text);
        break;
      case 'removeLines':
        text = delta.lines.join('\n') + '\n';
        doc.del(pos, text.length);
        break;
      default:
        throw new Error("unknown action: " + delta.action);
    }
  };

  addCursorColorIndex = function(cursorElement, index) {
    var classes, clazz, newClasses, _i, _len;
    classes = cursorElement.className.split(" ");
    newClasses = [];
    for (_i = 0, _len = classes.length; _i < _len; _i++) {
      clazz = classes[_i];
      if (clazz.indexOf('cursor_color_') === 0) {
        continue;
      }
      newClasses.push(clazz);
    }
    newClasses.push("cursor_color_" + index);
    return cursorElement.className = newClasses.join(" ");
  };

  window.sharejs.extendDoc('attach_ace', function(editor, keepEditorContents) {
    var check, clearConnections, cursorListener, doc, docListener, editorDoc, editorListener, offsetToPos, suppress, updateCursors,
      _this = this;
    this.editorAttached = true;
    if (!this.provides['text']) {
      throw new Error('Only text documents can be attached to ace');
    }
    doc = this;
    editorDoc = editor.getSession().getDocument();
    editorDoc.setNewLineMode('unix');
    check = function() {
      var _this = this;
      return window.setTimeout(function() {
        var editorText, otText, suppress;
        editorText = editorDoc.getValue();
        otText = doc.getText();
        if (editorText !== otText) {
          console.error("editor: " + editorText);
          console.error("ot:     " + otText);
          suppress = true;
          editorDoc.setValue(otText);
          suppress = false;
          return doc.emit("warn", "OT/editor mismatch\nOT: " + otText + "\neditor: " + editorText);
        }
      }, 0);
    };
    if (keepEditorContents) {
      doc.del(0, doc.getText().length);
      doc.insert(0, editorDoc.getValue());
    } else {
      editorDoc.setValue(doc.getText());
    }
    check();
    suppress = false;
    clearConnections = function() {
      var connection, connectionId, currentConnectionIds, _ref;
      if (!_this.connections) {
        return;
      }
      currentConnectionIds = [];
      _ref = _this.connections;
      for (connectionId in _ref) {
        connection = _ref[connectionId];
        if (connection.marker) {
          editor.session.removeMarker(connection.marker);
        }
        editor.session.removeGutterDecoration(connection.position.row, "foreign_selection_" + connection.index);
        currentConnectionIds.push(connectionId);
      }
      return sharejs._setActiveConnections(currentConnectionIds);
    };
    updateCursors = function() {
      var connection, connectionId, connectionIds, cursor, cursorElement, cursorLayer, i, index, ownCursor, range, ranges, _i, _len, _ref, _ref1;
      clearConnections();
      _this.connections = {};
      ranges = [];
      connectionIds = [];
      _ref = _this.cursors;
      for (connectionId in _ref) {
        if (!__hasProp.call(_ref, connectionId)) continue;
        cursor = _ref[connectionId];
        _this.connections[connectionId] = connection = {};
        connection.cursor = cursor;
        range = cursorToRange(editorDoc, cursor);
        connection.index = sharejs.getIndexForConnection(connectionId);
        connection.marker = editor.session.addMarker(range, "foreign_selection foreign_selection_" + connection.index + " ace_selection", "line");
        connection.position = range.end;
        editor.session.addGutterDecoration(connection.position.row, "foreign_selection_" + connection.index);
        if (range) {
          ranges.push(range);
        }
        connectionIds.push(connectionId);
      }
      ranges.push({
        cursor: null
      });
      editor.session.$selectionMarkers = ranges;
      cursorLayer = editor.renderer.$cursorLayer;
      cursorLayer.update(editor.renderer.layerConfig);
      _ref1 = cursorLayer.cursors.slice(0, -1);
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        cursorElement = _ref1[i];
        index = sharejs.getIndexForConnection(connectionIds[i]);
        addCursorColorIndex(cursorElement, index);
      }
      ownCursor = cursorLayer.cursors[cursorLayer.cursors.length - 1];
      return addCursorColorIndex(ownCursor, "00");
    };
    editorListener = function(change) {
      if (suppress) {
        return;
      }
      applyToShareJS(editorDoc, change.data, doc);
      updateCursors.call(doc);
      return check();
    };
    cursorListener = function(change) {
      var cursor;
      cursor = rangeToCursor(editorDoc, editor.getSelectionRange());
      return doc.setCursor(cursor);
    };
    this.on("cursors", updateCursors);
    editorDoc.on('change', editorListener);
    editor.on("changeSelection", cursorListener);
    docListener = function(op) {
      suppress = true;
      applyToDoc(editorDoc, op);
      suppress = false;
      return check();
    };
    offsetToPos = function(offset) {
      return editorDoc.indexToPosition(offset);
    };
    doc.on('insert', function(pos, text) {
      suppress = true;
      editorDoc.insert(offsetToPos(pos), text);
      suppress = false;
      return check();
    });
    doc.on('delete', function(pos, text) {
      var range;
      suppress = true;
      range = Range.fromPoints(offsetToPos(pos), offsetToPos(pos + text.length));
      editorDoc.remove(range);
      suppress = false;
      return check();
    });
    doc.detach_ace = function() {
      doc.removeListener('remoteop', docListener);
      doc.removeListener('cursors', updateCursors);
      editorDoc.removeListener('change', editorListener);
      editor.removeListener('changeSelection', cursorListener);
      delete doc.detach_ace;
      clearConnections();
      return this.editorAttached = false;
    };
  });

  _connections = [];

  sharejs._setActiveConnections = function(currentConnectionIds) {
    var connectionId, i, _i, _len, _results;
    _results = [];
    for (i = _i = 0, _len = _connections.length; _i < _len; i = ++_i) {
      connectionId = _connections[i];
      if (__indexOf.call(currentConnectionIds, connectionId) < 0) {
        _results.push(_connections[i] = null);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  sharejs.getIndexForConnection = function(connectionId) {
    var cid, i, index, length, _i, _len;
    index = _connections.indexOf(connectionId);
    if (index > -1) {
      return index;
    }
    for (i = _i = 0, _len = _connections.length; _i < _len; i = ++_i) {
      cid = _connections[i];
      if (cid === null) {
        _connections[i] = connectionId;
        return i;
      }
    }
    length = _connections.push(connectionId);
    return length - 1;
  };

  sharejs.getConnections = function() {
    return _connections;
  };

}).call(this);
