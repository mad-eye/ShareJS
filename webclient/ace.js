// Generated by CoffeeScript 1.6.3
(function() {
  var Range, applyToShareJS, cursorToRange, overflowColor, rangeToCursor, _colors, _sessionColors,
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Range = require("ace/range").Range;

  rangeToCursor = function(editorDoc, range) {
    return [editorDoc.positionToIndex(range.start), editorDoc.positionToIndex(range.end)];
  };

  cursorToRange = function(editorDoc, cursor) {
    var end, range, start;
    if (!(cursor instanceof Array)) {
      cursor = [cursor, cursor];
    }
    start = editorDoc.indexToPosition(cursor[0]);
    end = editorDoc.indexToPosition(cursor[1]);
    range = Range.fromPoints(start, end);
    range.cursor = end;
    return range;
  };

  applyToShareJS = function(editorDoc, delta, doc) {
    var pos, text;
    pos = rangeToCursor(editorDoc, delta.range)[0];
    switch (delta.action) {
      case 'insertText':
        doc.insert(pos, delta.text);
        break;
      case 'removeText':
        doc.del(pos, delta.text.length);
        break;
      case 'insertLines':
        text = delta.lines.join('\n') + '\n';
        doc.insert(pos, text);
        break;
      case 'removeLines':
        text = delta.lines.join('\n') + '\n';
        doc.del(pos, text.length);
        break;
      default:
        throw new Error("unknown action: " + delta.action);
    }
  };

  window.sharejs.extendDoc('attach_ace', function(editor, keepEditorContents) {
    var check, clearSessions, cursorListener, doc, docListener, editorDoc, editorListener, offsetToPos, suppress, updateCursors,
      _this = this;
    this.editorAttached = true;
    if (!this.provides['text']) {
      throw new Error('Only text documents can be attached to ace');
    }
    doc = this;
    editorDoc = editor.getSession().getDocument();
    editorDoc.setNewLineMode('unix');
    check = function() {
      var _this = this;
      return window.setTimeout(function() {
        var editorText, otText, suppress;
        editorText = editorDoc.getValue();
        otText = doc.getText();
        if (editorText !== otText) {
          console.error("editor: " + editorText);
          console.error("ot:     " + otText);
          suppress = true;
          editorDoc.setValue(otText);
          suppress = false;
          return doc.emit("warn", "OT/editor mismatch\nOT: " + otText + "\neditor: " + editorText);
        }
      }, 0);
    };
    if (keepEditorContents) {
      doc.del(0, doc.getText().length);
      doc.insert(0, editorDoc.getValue());
    } else {
      editorDoc.setValue(doc.getText());
    }
    check();
    suppress = false;
    clearSessions = function() {
      var currentSessionIds, session, sessionId, _ref;
      if (!_this.sessions) {
        return;
      }
      currentSessionIds = [];
      _ref = _this.sessions;
      for (sessionId in _ref) {
        session = _ref[sessionId];
        if (session.marker) {
          editor.session.removeMarker(session.marker);
        }
        currentSessionIds.push(sessionId);
      }
      return sharejs._setActiveSessions(currentSessionIds);
    };
    updateCursors = function() {
      var color, cursor, cursorElement, cursorLayer, i, ownCursor, range, ranges, session, sessionId, sessionIds, _i, _len, _ref, _ref1;
      clearSessions();
      if (_this.sessions == null) {
        _this.sessions = {};
      }
      ranges = [];
      sessionIds = [];
      console.log("###: cursors:", _this.cursors);
      _ref = _this.cursors;
      for (sessionId in _ref) {
        if (!__hasProp.call(_ref, sessionId)) continue;
        cursor = _ref[sessionId];
        _this.sessions[sessionId] = session = {};
        session.cursor = cursor;
        range = cursorToRange(editorDoc, cursor);
        session.index = sharejs.getIndexForSession(sessionId);
        session.marker = editor.session.addMarker(range, "foreign_selection foreign_selection_" + session.index + " ace_selection", "line");
        if (!(cursor instanceof Array)) {
          cursor = [cursor, cursor];
        }
        session.position = cursor[1];
        if (range) {
          ranges.push(range);
        }
        sessionIds.push(sessionId);
      }
      ranges.push({
        cursor: null
      });
      console.log("Found sessionIds", sessionIds);
      editor.session.$selectionMarkers = ranges;
      cursorLayer = editor.renderer.$cursorLayer;
      cursorLayer.update(editor.renderer.layerConfig);
      _ref1 = cursorLayer.cursors.slice(0, -1);
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        cursorElement = _ref1[i];
        color = sharejs.getColorForSession(sessionIds[i]);
        console.log("Got color " + color + " for session " + sessionIds[i]);
        cursorElement.style.borderColor = color;
      }
      ownCursor = cursorLayer.cursors[cursorLayer.cursors.length - 1];
      return ownCursor.style.borderColor = "Black";
    };
    editorListener = function(change) {
      if (suppress) {
        return;
      }
      applyToShareJS(editorDoc, change.data, doc);
      updateCursors.call(doc);
      return check();
    };
    cursorListener = function(change) {
      var cursor;
      cursor = rangeToCursor(editorDoc, editor.getSelectionRange());
      return doc.setCursor(cursor);
    };
    this.on("cursors", updateCursors);
    editorDoc.on('change', editorListener);
    editor.on("changeSelection", cursorListener);
    docListener = function(op) {
      suppress = true;
      applyToDoc(editorDoc, op);
      suppress = false;
      return check();
    };
    offsetToPos = function(offset) {
      return editorDoc.indexToPosition(offset);
    };
    doc.on('insert', function(pos, text) {
      suppress = true;
      editorDoc.insert(offsetToPos(pos), text);
      suppress = false;
      return check();
    });
    doc.on('delete', function(pos, text) {
      var range;
      suppress = true;
      range = Range.fromPoints(offsetToPos(pos), offsetToPos(pos + text.length));
      editorDoc.remove(range);
      suppress = false;
      return check();
    });
    doc.detach_ace = function() {
      clearSelections();
      clearSessions();
      this.editorAttached = false;
      doc.removeListener('remoteop', docListener);
      doc.removeListener('cursors', updateCursors);
      editorDoc.removeListener('change', editorListener);
      editor.removeListener('changeSelection', cursorListener);
      return delete doc.detach_ace;
    };
  });

  _colors = ["#63782F", "#A13CB4", "#FF913D", "#00A3BB", "#FF007A", "#58B442", "#63782F"];

  overflowColor = "#99cc99";

  _sessionColors = {};

  sharejs._setActiveSessions = function(currentSessionIds) {
    var color, sessionId;
    console.log("Setting activeSessions to", currentSessionIds);
    for (sessionId in _sessionColors) {
      color = _sessionColors[sessionId];
      if (__indexOf.call(currentSessionIds, sessionId) < 0) {
        delete _sessionColors[sessionId];
      }
    }
    return console.log("New sessionColors", _sessionColors);
  };

  sharejs.getColorForSession = function(sessionId) {
    var assignedColors, color, _i, _len;
    color = _sessionColors[sessionId];
    if (color != null) {
      console.log("Found color " + color + " for " + sessionId);
    }
    if (color != null) {
      return color;
    }
    assignedColors = _.values(_sessionColors);
    for (_i = 0, _len = _colors.length; _i < _len; _i++) {
      color = _colors[_i];
      if (__indexOf.call(assignedColors, color) >= 0) {
        continue;
      }
      _sessionColors[sessionId] = color;
      console.log("Found color " + color + " for " + sessionId);
      return color;
    }
    return overflowColor;
  };

  sharejs.getIndexForSession = function(sessionId) {
    var color, index;
    color = sharejs.getColorForSession(sessionId);
    index = _colors.indexOf(color);
    console.log("Found index " + index + " for color " + color + " for session " + sessionId);
    if (index > -1) {
      return index;
    }
    return null;
  };

  sharejs.getSessionColors = function() {
    return _sessionColors;
  };

  sharejs.getColors = function() {
    return _colors;
  };

}).call(this);
